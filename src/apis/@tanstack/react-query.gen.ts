// This file is auto-generated by @hey-api/openapi-ts

import { type Options, usersApiMe, usersApiListUsers, usersApiGetUser, usersApiLogin, usersApiSignup } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { UsersApiMeData, UsersApiListUsersData, UsersApiGetUserData, UsersApiLoginData, UsersApiLoginResponse, UsersApiSignupData, UsersApiSignupResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const usersApiMeQueryKey = (options?: Options<UsersApiMeData>) => createQueryKey('usersApiMe', options);

/**
 * Get current user
 */
export const usersApiMeOptions = (options?: Options<UsersApiMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersApiMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersApiMeQueryKey(options)
    });
};

export const usersApiListUsersQueryKey = (options?: Options<UsersApiListUsersData>) => createQueryKey('usersApiListUsers', options);

/**
 * List all users
 */
export const usersApiListUsersOptions = (options?: Options<UsersApiListUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersApiListUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersApiListUsersQueryKey(options)
    });
};

export const usersApiGetUserQueryKey = (options: Options<UsersApiGetUserData>) => createQueryKey('usersApiGetUser', options);

/**
 * Get user by ID
 */
export const usersApiGetUserOptions = (options: Options<UsersApiGetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersApiGetUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersApiGetUserQueryKey(options)
    });
};

export const usersApiLoginQueryKey = (options: Options<UsersApiLoginData>) => createQueryKey('usersApiLogin', options);

/**
 * Login user
 */
export const usersApiLoginOptions = (options: Options<UsersApiLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersApiLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersApiLoginQueryKey(options)
    });
};

/**
 * Login user
 */
export const usersApiLoginMutation = (options?: Partial<Options<UsersApiLoginData>>): UseMutationOptions<UsersApiLoginResponse, DefaultError, Options<UsersApiLoginData>> => {
    const mutationOptions: UseMutationOptions<UsersApiLoginResponse, DefaultError, Options<UsersApiLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersApiLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersApiSignupQueryKey = (options: Options<UsersApiSignupData>) => createQueryKey('usersApiSignup', options);

/**
 * Register user
 */
export const usersApiSignupOptions = (options: Options<UsersApiSignupData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersApiSignup({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersApiSignupQueryKey(options)
    });
};

/**
 * Register user
 */
export const usersApiSignupMutation = (options?: Partial<Options<UsersApiSignupData>>): UseMutationOptions<UsersApiSignupResponse, DefaultError, Options<UsersApiSignupData>> => {
    const mutationOptions: UseMutationOptions<UsersApiSignupResponse, DefaultError, Options<UsersApiSignupData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersApiSignup({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};