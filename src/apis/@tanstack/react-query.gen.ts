// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  userapiMeAf7Faa18,
  userapiListUsers0Fc0C8F4,
  userapiGetUser026Ba149,
  authapiLogin0E3Fda03,
  authapiSignup359681Ed,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  UserapiMeAf7Faa18Data,
  UserapiListUsers0Fc0C8F4Data,
  UserapiGetUser026Ba149Data,
  AuthapiLogin0E3Fda03Data,
  AuthapiLogin0E3Fda03Response,
  AuthapiSignup359681EdData,
  AuthapiSignup359681EdResponse,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  }
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const userapiMeAf7Faa18QueryKey = (
  options?: Options<UserapiMeAf7Faa18Data>
) => createQueryKey("userapiMeAf7Faa18", options);

/**
 * Me
 * Get current user profile
 */
export const userapiMeAf7Faa18Options = (
  options?: Options<UserapiMeAf7Faa18Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userapiMeAf7Faa18({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userapiMeAf7Faa18QueryKey(options),
  });
};

export const userapiListUsers0Fc0C8F4QueryKey = (
  options?: Options<UserapiListUsers0Fc0C8F4Data>
) => createQueryKey("userapiListUsers0Fc0C8F4", options);

/**
 * List Users
 * List all users
 */
export const userapiListUsers0Fc0C8F4Options = (
  options?: Options<UserapiListUsers0Fc0C8F4Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userapiListUsers0Fc0C8F4({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userapiListUsers0Fc0C8F4QueryKey(options),
  });
};

export const userapiGetUser026Ba149QueryKey = (
  options: Options<UserapiGetUser026Ba149Data>
) => createQueryKey("userapiGetUser026Ba149", options);

/**
 * Get User
 * Get user by ID
 */
export const userapiGetUser026Ba149Options = (
  options: Options<UserapiGetUser026Ba149Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userapiGetUser026Ba149({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userapiGetUser026Ba149QueryKey(options),
  });
};

export const authapiLogin0E3Fda03QueryKey = (
  options: Options<AuthapiLogin0E3Fda03Data>
) => createQueryKey("authapiLogin0E3Fda03", options);

/**
 * Login
 * Login user with email and password
 */
export const authapiLogin0E3Fda03Options = (
  options: Options<AuthapiLogin0E3Fda03Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authapiLogin0E3Fda03({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authapiLogin0E3Fda03QueryKey(options),
  });
};

/**
 * Login
 * Login user with email and password
 */
export const authapiLogin0E3Fda03Mutation = (
  options?: Partial<Options<AuthapiLogin0E3Fda03Data>>
): UseMutationOptions<
  AuthapiLogin0E3Fda03Response,
  DefaultError,
  Options<AuthapiLogin0E3Fda03Data>
> => {
  const mutationOptions: UseMutationOptions<
    AuthapiLogin0E3Fda03Response,
    DefaultError,
    Options<AuthapiLogin0E3Fda03Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authapiLogin0E3Fda03({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authapiSignup359681EdQueryKey = (
  options: Options<AuthapiSignup359681EdData>
) => createQueryKey("authapiSignup359681Ed", options);

/**
 * Signup
 * Register new user
 */
export const authapiSignup359681EdOptions = (
  options: Options<AuthapiSignup359681EdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authapiSignup359681Ed({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authapiSignup359681EdQueryKey(options),
  });
};

/**
 * Signup
 * Register new user
 */
export const authapiSignup359681EdMutation = (
  options?: Partial<Options<AuthapiSignup359681EdData>>
): UseMutationOptions<
  AuthapiSignup359681EdResponse,
  DefaultError,
  Options<AuthapiSignup359681EdData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthapiSignup359681EdResponse,
    DefaultError,
    Options<AuthapiSignup359681EdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authapiSignup359681Ed({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
